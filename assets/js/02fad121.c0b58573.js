"use strict";(self.webpackChunkcodepod_io=self.webpackChunkcodepod_io||[]).push([[757],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},42:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={},i="Developer Manual",l={unversionedId:"developer/README",id:"developer/README",title:"Developer Manual",description:"The development repository is https://github.com/codepod-io/codepod",source:"@site/docs/4-developer/README.md",sourceDirName:"4-developer",slug:"/developer/",permalink:"/docs/developer/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"User Manual",permalink:"/docs/manual/"},next:{title:"Press & Screenshots",permalink:"/docs/press/"}},p={},s=[{value:".env file",id:"env-file",level:2},{value:"Start the stack",id:"start-the-stack",level:2},{value:"Initialize the database",id:"initialize-the-database",level:2},{value:"Auto-completion &amp; Linting",id:"auto-completion--linting",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"developer-manual"},"Developer Manual"),(0,o.kt)("p",null,"The development repository is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/codepod-io/codepod"},"https://github.com/codepod-io/codepod")),(0,o.kt)("p",null,"The docker compose files are in ",(0,o.kt)("inlineCode",{parentName:"p"},"compose/dev")," folder. The ",(0,o.kt)("inlineCode",{parentName:"p"},"dev")," stack mounts the\n",(0,o.kt)("inlineCode",{parentName:"p"},"src")," folder, so that you can edit the files on your local computer, and let the\nnode.js process inside the container do the compiling and hot-reloading."),(0,o.kt)("p",null,"To install docker-compose, follow the official ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/linux/"},"Docker documentation"),"."),(0,o.kt)("h2",{id:"env-file"},".env file"),(0,o.kt)("p",null,"First, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"dev/.env")," file with the following content (leave as is or change the value to\nwhatever you want)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-properties"},"POSTGRES_USER=myusername\nPOSTGRES_PASSWORD=mypassword\nPOSTGRES_DB=mydbname\nJWT_SECRET=mysupersecretjwttoken\n\nGOOGLE_CLIENT_ID=<google oauth client id>\n\nEXPORT_AWS_S3_REGION=us-west-1\nEXPORT_AWS_S3_BUCKET=<YOUR_BUCKET_NAME>\nEXPORT_AWS_S3_ACCESS_KEY_ID=<YOUR_ACCESS_KEY>\nEXPORT_AWS_S3_SECRET_ACCESS_KEY=<YOUR_SECRET_ACCESS_KEY>\n")),(0,o.kt)("p",null,"Optional:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Leave the ",(0,o.kt)("inlineCode",{parentName:"li"},"GOOGLE_CLIENT_ID")," empty if you do not need the OAuth provided by Google."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"EXPORT_AWS_S3_XXX")," are used for file export. You could leave it empty if you don't use it.")),(0,o.kt)("h2",{id:"start-the-stack"},"Start the stack"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd dev\ndocker compose up -d\n")),(0,o.kt)("p",null,"You need to initialized the database first before starting the stack. See below."),(0,o.kt)("p",null,"Wait a few minutes for the package installation and compilation. Once the ",(0,o.kt)("inlineCode",{parentName:"p"},"ui")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"api")," containers are ready, go to ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:80")," to see the app."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"http://localhost:80/graphql"),": Apollo GraphQL explorer for the backend APIs"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"http://prisma.127.0.0.1.sslip.io"),": Prisma Studio for viewing and debugging the database.")),(0,o.kt)("h2",{id:"initialize-the-database"},"Initialize the database"),(0,o.kt)("p",null,"If this is your first time running it, you would need to initialize the database as it's empty. To do that, open a shell into the API container and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx prisma migrate dev\n")),(0,o.kt)("p",null,"This command is also needed after the database schema is changed. The protocol is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"One developer changed the schema ",(0,o.kt)("inlineCode",{parentName:"li"},"./api/prisma/schema.prisma"),". He will run\n",(0,o.kt)("inlineCode",{parentName:"li"},"npx prisma migrate dev --name add_a_new_field"),". This will generate a\nmigration.\nThe schema change along with this migration need to be checked in to git."),(0,o.kt)("li",{parentName:"ul"},"Another developer pulls the change, then running the ",(0,o.kt)("inlineCode",{parentName:"li"},"npx prisma migrate dev")," (in the api container's shell) to apply the schema change.")),(0,o.kt)("h2",{id:"auto-completion--linting"},"Auto-completion & Linting"),(0,o.kt)("p",null,"Although we developed this project using docker, we still want features like auto-completion and linting while coding. For that to work, you need to install the all the relevant node packages, i.e."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# api, proxy, runtime, ui\ncd ./api/\n\n# Run 'npm install' instead if you are using npm\nyarn\n")))}u.isMDXComponent=!0}}]);