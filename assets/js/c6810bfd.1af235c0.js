"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[869],{1242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"intro","title":"Introduction","description":"CodePod.io is an open-source canvas-based coding IDE that","source":"@site/docs/1-intro.md","sourceDirName":".","slug":"/intro","permalink":"/docs/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"CodePod App User Manual","permalink":"/docs/manual/"}}');var r=n(216),i=n(2737);const a={},s="Introduction",c={},d=[];function u(e){const t={a:"a",h1:"h1",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"http://CodePod.io",children:"CodePod.io"})," is an open-source canvas-based coding IDE that\nhelps programmers develop large, production-ready projects faster by presenting\ninteractive coding (e.g., Jupyter) on a hierarchical, scoped, 2D canvas. Without\ncode modularization (traditionally done via organizing text files under\ntree-structured folder hierarchies), a Jupyter notebook can easily become messy,\ndifficult to manage and scale. Alleviating such limitations, CodePod was born to\nbump interactive coding beyond prototyping and demos. Our website is\n",(0,r.jsx)(t.a,{href:"https://codepod.io",children:"https://codepod.io"}),". More details are in our paper:\n",(0,r.jsx)(t.a,{href:"https://arxiv.org/abs/2301.02410",children:"https://arxiv.org/abs/2301.02410"})]}),"\n",(0,r.jsxs)(t.p,{children:["Start with the ",(0,r.jsx)(t.a,{href:"/docs/manual",children:"user manual"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},2737:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var o=n(6372);const r={},i=o.createContext(r);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);