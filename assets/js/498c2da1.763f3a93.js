"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[189],{2162:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"kernel-ffi/README","title":"Kernel-FFI","description":"Overview","source":"@site/docs/4-kernel-ffi/README.md","sourceDirName":"4-kernel-ffi","slug":"/kernel-ffi/","permalink":"/docs/kernel-ffi/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"User Manual","permalink":"/docs/manual/"},"next":{"title":"Videos","permalink":"/docs/video"}}');var r=i(216),a=i(2737);const t={},l="Kernel-FFI",o={},c=[{value:"Overview",id:"overview",level:2},{value:"What is Kernel-FFI?",id:"what-is-kernel-ffi",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Supported Languages",id:"supported-languages",level:2},{value:"Dynamic Languages",id:"dynamic-languages",level:3},{value:"Static Languages",id:"static-languages",level:3},{value:"Usage in CodePod",id:"usage-in-codepod",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"1. Automatic Discovery",id:"1-automatic-discovery",level:3},{value:"2. Transparent Transformation",id:"2-transparent-transformation",level:3},{value:"3. Seamless Execution",id:"3-seamless-execution",level:3},{value:"Remote Object Reference",id:"remote-object-reference",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Object-Oriented Programming",id:"object-oriented-programming",level:3},{value:"Recursive Calls",id:"recursive-calls",level:3},{value:"Type Safety",id:"type-safety",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Communication Model",id:"communication-model",level:3},{value:"Client and Host examples",id:"client-and-host-examples",level:2},{value:"Python",id:"python",level:3},{value:"C++",id:"c",level:3},{value:"C#",id:"c-1",level:3},{value:"Go",id:"go",level:3},{value:"Julia",id:"julia",level:3},{value:"Ruby",id:"ruby",level:3},{value:"Racket",id:"racket",level:3},{value:"Rust",id:"rust",level:3},{value:"Typescript/Javascript",id:"typescriptjavascript",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"kernel-ffi",children:"Kernel-FFI"})}),"\n",(0,r.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(e.p,{children:"Kernel-FFI is a transparent, language-agnostic framework that enables seamless cross-language function calls and object manipulation within interactive notebooks. It allows you to call functions, access variables, and work with objects across different programming languages as if they were native to your current language."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"kernel-ffi-intro",src:i(1177).A+"",width:"2524",height:"1750"})}),"\n",(0,r.jsx)(e.h2,{id:"what-is-kernel-ffi",children:"What is Kernel-FFI?"}),"\n",(0,r.jsx)(e.p,{children:"Kernel-FFI solves the challenge of multi-language development in interactive environments like Jupyter Notebooks. Traditional approaches require extensive manual configuration, boilerplate code, and often lack support for modern programming constructs like object-oriented programming and recursive calls."}),"\n",(0,r.jsx)(e.h3,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Transparent Cross-Language Calls"}),": Call functions in other languages as if they were native"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Object-Oriented Programming Support"}),": Create and manipulate objects across language boundaries"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"No Boilerplate Code"}),": Automatic source-level transformation eliminates manual bindings"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Interactive Development"}),": Works seamlessly with Jupyter's dynamic, exploratory programming model"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Language Agnostic"}),": Supports multiple programming languages with different paradigms"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"supported-languages",children:"Supported Languages"}),"\n",(0,r.jsx)(e.p,{children:"Kernel-FFI supports a wide range of programming languages:"}),"\n",(0,r.jsx)(e.h3,{id:"dynamic-languages",children:"Dynamic Languages"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Python"}),": Data science, machine learning, web development"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"JavaScript/TypeScript"}),": Web frontend/backend, Node.js applications"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Julia"}),": Scientific computing, multiple dispatch"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Ruby"}),": Web development (Rails), metaprogramming"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Racket"}),": Functional programming, DSLs"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"static-languages",children:"Static Languages"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rust"}),": Memory safety, systems programming"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Go"}),": Cloud services, microservices"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"C++"}),": Systems programming, performance-critical applications"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"C#"}),": .NET ecosystem, Windows development"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"usage-in-codepod",children:"Usage in CodePod"}),"\n",(0,r.jsx)(e.p,{children:"Kernel-FFI can be directly used in CodePod. Just create pods of different languages, and call each other as if they are native!"}),"\n",(0,r.jsx)("img",{src:i(8231).A,alt:"unified-framework",width:"600"}),"\n",(0,r.jsx)(e.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsx)("img",{src:i(4780).A,alt:"simple-loop",width:"800"}),"\n",(0,r.jsx)(e.h3,{id:"1-automatic-discovery",children:"1. Automatic Discovery"}),"\n",(0,r.jsx)(e.p,{children:"Kernel-FFI automatically discovers and maintains a registry of programming constructs (functions, classes, variables) defined in each kernel. As you add, modify, or remove code, the registry updates to reflect the current state."}),"\n",(0,r.jsx)(e.h3,{id:"2-transparent-transformation",children:"2. Transparent Transformation"}),"\n",(0,r.jsx)(e.p,{children:"When you use a function or object from another language, Kernel-FFI automatically transforms your code into an intermediate representation that can be executed across language boundaries."}),"\n",(0,r.jsx)(e.h3,{id:"3-seamless-execution",children:"3. Seamless Execution"}),"\n",(0,r.jsx)(e.p,{children:"The transformed code is executed in the target language kernel, and results are automatically converted back to your native language format."}),"\n",(0,r.jsx)(e.h2,{id:"remote-object-reference",children:"Remote Object Reference"}),"\n",(0,r.jsx)("img",{src:i(5788).A,alt:"objRefSequence",width:"800"}),"\n",(0,r.jsx)(e.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsx)(e.h3,{id:"object-oriented-programming",children:"Object-Oriented Programming"}),"\n",(0,r.jsx)(e.p,{children:"Kernel-FFI supports full OOP across languages:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Object Instantiation"}),": Create objects in one language and use them in another"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Method Calls"}),": Call methods on foreign objects transparently"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"State Management"}),": Maintain object state across language boundaries"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Automatic Cleanup"}),": Resources are automatically managed"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"recursive-calls",children:"Recursive Calls"}),"\n",(0,r.jsx)(e.p,{children:"Support for complex multi-language workflows:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Non-blocking Communication"}),": Side-channel communication prevents blocking"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Recursive Function Calls"}),": Functions can call back to other languages"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Asynchronous Support"}),": Handle async operations across languages"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"type-safety",children:"Type Safety"}),"\n",(0,r.jsx)(e.p,{children:"Maintains type safety across different language paradigms:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Dynamic Languages"}),": Runtime type checking and conversion"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Static Languages"}),": Compile-time type information preservation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Automatic Serialization"}),": Handles complex data structures"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(e.p,{children:"Kernel-FFI uses a three-layer architecture:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Source Analysis"}),": Parses and identifies cross-language usage patterns"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Intermediate Representation"}),": Converts operations to language-agnostic format"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Target Execution"}),": Generates and executes code in target languages"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"communication-model",children:"Communication Model"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Jupyter Protocol"}),": Leverages existing Jupyter messaging"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Side-Channel"}),": HTTP-based communication for non-blocking operations"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Object Store"}),": Global registry for managing cross-language objects"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"client-and-host-examples",children:"Client and Host examples"}),"\n",(0,r.jsx)(e.h3,{id:"python",children:"Python"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"\n# Python\n\n\ndef foo(x):\n    return x+1\n\na1 = 23\n\nclass B1:\n    def __init__(self, v1):\n        self.v1 = v1\n    def m1(self, v2):\n        return self.v1 + v2\n\nb1 = B1(4)\nb1.m1(3)\n\ndef fObjArg(x):\n    return x.v1 + 1\n\ndef fObjRet(x):\n    return B1(x)\n\n\n\n# ------------------------------------------------------\n# Client code\n# ------------------------------------------------------\n\nfoo(3) + 1\na1 + 1\nb1.m1(9)\n\nb2 = B1(5)\nb2.m1(8)\n\nfObjArg(b2)\nfObjArg(b1)\nfObjArg(fObjRet(3))\n\n\n"})}),"\n",(0,r.jsx)(e.h3,{id:"c",children:"C++"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'\n\nint foo(int x) {\n    return x + 1;\n}\nint a1 = 23;\nclass B1 {\nprivate:\n    int v1;\npublic:\n    B1(int v) : v1(v) {}\n    int m1(int v2) {\n        return v1 + v2;\n    }\n};\nB1 b1(4);\nb1.m1(3);\nint fObjArg(B1 x) {\n    return x.m1(0) + 1;\n}\nB1 fObjRet(int x) {\n    return B1(x);\n}\n\n\n// ------------------------------------------------------\n// Client for paper\n// ------------------------------------------------------\n\nfoo(3).get<int>() + 1\na1.get<int>() + 1\nb1.m1(2).get<int>() + 1\n\nauto b2 = B1(3)\nb2.call("m1")(8)\n\nfObjArg(b1)\nfObjArg(b2)\nfObjArg(fObjRet(3))\n\n\n'})}),"\n",(0,r.jsx)(e.h3,{id:"c-1",children:"C#"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"\n\nint foo(int x) {\n    return x + 1;\n}\nint a1 = 23;\nclass B1 {\n    private int v1;\n    public B1(int v1) {\n        this.v1 = v1;\n    }\n    public int m1(int v2) {\n        return v1 + v2;\n    }\n}\nvar b1 = new B1(4);\nb1.m1(9);\nint fObjArg(B1 x) {\n    return x.m1(0) + 1;\n}\ndynamic fObjRet(int x) {\n    return new B1(x);\n}\n\n\n// ------------------------------------------------------\n// Client code\n// ------------------------------------------------------\n\nfoo(3)\na1 + 1\nb1.m1(9)\n\nvar b2 = new B1(5);\nb2.m1(8)\n\nfObjArg(b2)\nfObjArg(b1)\nfObjArg(fObjRet(3))\n\n\n"})}),"\n",(0,r.jsx)(e.h3,{id:"go",children:"Go"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'\n\nfunc foo(x int) int {\n\treturn x + 1\n}\nvar a1 = 23\n\ntype B1 struct {\n\tv1 int\n}\nfunc (b *B1) m1(v2 int) int {\n\treturn b.v1 + v2\n}\n\nb1 := B1{v1: 4}\nb1.m1(3)\n\nfunc fObjArg(x B1) int {\n\treturn x.v1 + 1\n}\nfunc fObjRet(x int) B1 {\n\treturn B1{v1: x}\n}\n\n// ------------------------------------------------------\n// Client code for paper\n// ------------------------------------------------------\n\nfoo(3)\nfoo(3).(float64) + 1\na1\na1.(float64) + 1\nb1.m1(3)\nb2,err := B1(5)\nb2.Method("m1")(5)\n\nfObjArg(b2)\nfObjArg(b1)\nfObjArg(fObjRet(3))\n\n\n\n'})}),"\n",(0,r.jsx)(e.h3,{id:"julia",children:"Julia"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-julia",children:"\n\nfunction foo(x)\n    return x+5\nend\na1 = 23\n\nmutable struct B1\n    v1::Int\nend\nb1 = B1(12)\nfunction m1(b::B1, v2)\n    return b.v1 + v2\nend\nb1 = B1(4)\nm1(b1, 3)\n\nfunction fObjArg(x::B1)\n    return x.v1 + 1\nend\nfunction fObjRet(x)\n    return B1(x)\nend\n\n# ------------------------------------------------------\n# Client code\n# ------------------------------------------------------\n\nfoo(3)\na1 + 8\nb1.m1(9)\n\nb2 = B1(8)\nb2.m1(9)\n\nfObjArg(b2)\nfObjArg(b1)\nfObjArg(fObjRet(3))\n\n"})}),"\n",(0,r.jsx)(e.h3,{id:"ruby",children:"Ruby"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rb",children:"# ------------------------------------------------------\n# Host code\n# ------------------------------------------------------\n\ndef foo(x)\n  x + 1\nend\na1 = 23\nclass B1\n  def initialize(v1)\n    @v1 = v1\n  end\n\n  def m1(v2)\n    @v1 + v2\n  end\nend\nb1 = B1.new(4)\nb1.m1(3)\ndef fObjArg(x)\n  x.m1(0) + 1\nend\ndef fObjRet(x)\n  B1.new(x)\nend\n\n# ------------------------------------------------------\n# Client code\n# ------------------------------------------------------\n\n\nfoo(3)\na1\nb1.m1(4)\n\nb2 = B1(5)\nb2.m1(3)\n\nfObjArg(b2)\nfObjArg(b1)\nfObjArg(fObjRet(3))\n\n"})}),"\n",(0,r.jsx)(e.h3,{id:"racket",children:"Racket"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-scheme",children:'\n(define-syntax (define-class stx)\n  (syntax-case stx ()\n    [(_ class-name (fields ...) body ...)\n     (with-syntax ([make-name (datum->syntax #\'class-name\n                                             (string->symbol\n                                              (format "make-~a" (syntax-e #\'class-name))))])\n       #\'(begin\n           (define class-name\n             (class object%\n               (init-field fields ...)\n               (super-new)\n               body ...))\n           (define (make-name fields ...)\n             (new class-name [fields fields] ...))))]))\n\n; ------------------------------------------------------\n; Host code\n; ------------------------------------------------------\n\n\n(define (foo x)\n  (+ x 1))\n\n(define a1 23)\n\n(define-class B1 (v1)\n  (define/public (m1 v2)\n    (+ v1 v2)))\n\n(define b1 (make-B1 10))\n\n(send b1 m1 5)\n\n(define (fObjArg x)\n  (+ (send x m1 0) 1))\n\n(define (fObjRet x)\n  (make-B1 x))\n\n\n\n\n; ------------------------------------------------------\n; Client code\n; ------------------------------------------------------\n\n(foo 1)\n(+ a1 2)\n((send b1 call "m1") 2)\n\n(define b2 (B1 3))\n((send b2 call "m1") 3)\n\n(fObjArg b2)\n(fObjArg b1)\n(fObjArg (fObjRet 3))\n\n'})}),"\n",(0,r.jsx)(e.h3,{id:"rust",children:"Rust"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rs",children:'\n\nfn foo(x: i32) -> i32 {\n  x + 1\n}\nlet a1 = 23;\n#[derive(Debug, Clone)]\nstruct B1 {\n  v1: i32,\n}\nimpl B1 {\n  fn new(v1: i32) -> Self {\n      Self { v1 }}\n  fn m1(&self, v2: i32) -> i32 {\n      self.v1 + v2 }}\nlet b1 = B1::new(4);\nb1.m1(3)\nfn fObjArg(x: B1) -> i32 {\n    x.v1 + 1\n}\nfn fObjRet(x: i32) -> B1 {\n    B1::new(x)\n}\n\n\n// ------------------------------------------------------\n// Client code for paper\n// ------------------------------------------------------\n\nfoo(3)\nfoo(3).as_i64().unwrap()+1\na1.as_i64().unwrap() + 1\n\nb1.m1(8)\nlet b2 = B1(5);\nb2.call_method("m1",\n      vec![Value::from(3)])\n\nfObjArg(b2)\nfObjArg(b1)\nfObjArg(fObjRet(3))\n\n\n\n\n'})}),"\n",(0,r.jsx)(e.h3,{id:"typescriptjavascript",children:"Typescript/Javascript"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// ------------------------------------------------------------\n// Host code\n// ------------------------------------------------------------\n\nfunction foo(x) {\n  return x + 4;\n}\nconst a1 = 2;\nclass B1 {\n  v1;\n  constructor(v1) {\n    this.v1 = v1;\n  }\n  m1(x) {\n    return x + this.v1;\n  }\n}\nconst b1 = new B1(2);\nb1.m1(3);\nfunction fObjArg(x) {\n  return x.v1 + 1;\n}\nfunction fObjRet(x) {\n  return new B1(x);\n}\n\n// ------------------------------------------------------------\n// Client code for paper\n// ------------------------------------------------------------\n\nawait foo(3);\n1 + (await a1) + 2;\nawait b1.m1(8);\n\nconst b2 = await new B1(9);\nawait b2.m1(19);\n\nawait fObjArg(b2);\nawait fObjArg(await b1);\nawait fObjArg(await fObjRet(10));\n\n// end\n"})}),"\n",(0,r.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(e.p,{children:"Kernel-FFI represents a significant advancement in multi-language development for interactive environments. By providing transparent, language-agnostic cross-language function calls, it enables developers to leverage the strengths of different programming languages without the traditional overhead of FFI setup and maintenance."}),"\n",(0,r.jsx)(e.p,{children:"Whether you're working on data science projects that benefit from multiple language ecosystems, building web applications that span frontend and backend languages, or developing systems that require both high-level expressiveness and low-level performance, Kernel-FFI provides the tools you need to work seamlessly across language boundaries."})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8231:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/codepod-unified-framework-6f5583f94a24e8b0177705b8547b42f4.png"},5788:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/objRefSequence-b1d9c04fa68c095851a91725aca21a7d.png"},4780:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/simple-loop-e2cf9ee030b5dbd4412e111a3eb7f525.png"},1177:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/kernel-ffi-intro-fcd6e2603db2ad082487a03265fc9c8f.png"},2737:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>l});var s=i(6372);const r={},a=s.createContext(r);function t(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);